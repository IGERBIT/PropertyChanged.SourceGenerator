using System;
using System.Collections.Generic;
using System.Text;

namespace PropertyChanged.SourceGenerator
{
    public static class StringConstants
    {
        public static string FileHeader { get; } = @$"// <auto-generated>
//     Auto-generated by PropertyChanged.SourceGenerator {typeof(Generator).Assembly.GetName().Version}
// </auto-generated>";

        public static string Attributes { get; } = FileHeader + @"

namespace PropertyChanged.SourceGenerator
{
    internal enum Getter
    {
        Public = 6,
        ProtectedInternal = 5,
        Internal = 4,
        Protected = 3,
        PrivateProtected = 2,
        Private = 1,
    }

    internal enum Setter
    {
        Public = 6,
        ProtectedInternal = 5,
        Internal = 4,
        Protected = 3,
        PrivateProtected = 2,
        Private = 1,
    }

    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = false)]
    internal class NotifyAttribute : global::System.Attribute
    {
        public NotifyAttribute() { }
        public NotifyAttribute(string name, Getter get = Getter.Public, Setter set = Setter.Public) { }
        public NotifyAttribute(Getter get, Setter set = Setter.Public) { }
        public NotifyAttribute(Setter set) { }
    }

    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)]
    internal class AlsoNotifyAttribute : global::System.Attribute
    {
        public AlsoNotifyAttribute(params string[] otherProperties) { }
    }

    [global::System.AttributeUsage(global::System.AttributeTargets.Field | global::System.AttributeTargets.Property, AllowMultiple = true)]
    internal class DependsOnAttribute : global::System.Attribute
    {
        public DependsOnAttribute(params string[] otherProperties) { }
    }
}";
    }
}
