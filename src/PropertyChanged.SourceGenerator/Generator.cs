using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using System.Text;
using Microsoft.CodeAnalysis;
using PropertyChanged.SourceGenerator.Analysis;

namespace PropertyChanged.SourceGenerator
{
    public class Generator
    {
        private readonly IndentedTextWriter writer = new(new StringWriter());

        public static string FileHeader { get; } = @$"// <auto-generated>
//     Auto-generated by PropertyChanged.SourceGenerator {typeof(Generator).Assembly.GetName().Version}
// </auto-generated>";

        public Generator()
        {
            this.writer.WriteLine(FileHeader);
        }

        public void Generate(TypeAnalysis typeAnalysis)
        {
            // SG'd files default to 'disable'
            if (typeAnalysis.NullableContext != NullableContextOptions.Disable)
            {
                this.writer.WriteLine(NullableContextToComment(typeAnalysis.NullableContext));
            }

            if (typeAnalysis.TypeSymbol.ContainingNamespace is { IsGlobalNamespace: false } @namespace)
            {
                this.writer.WriteLine($"namespace {@namespace.ToDisplayString(SymbolDisplayFormats.Namespace)}");
                this.writer.WriteLine("{");
                this.writer.Indent++;

                this.GenerateType(typeAnalysis);

                this.writer.Indent--;
                this.writer.WriteLine("}");
            }
            else
            {
                this.GenerateType(typeAnalysis);
            }
        }

        private void GenerateType(TypeAnalysis typeAnalysis)
        {
            this.writer.Write($"partial {typeAnalysis.TypeSymbol.ToDisplayString(SymbolDisplayFormats.TypeDeclaration)}");
            if (!typeAnalysis.HasInpcInterface)
            {
                this.writer.Write(" : global::System.ComponentModel.INotifyPropertyChanged");
            }
            this.writer.WriteLine();
            
            this.writer.WriteLine("{");
            this.writer.Indent++;

            if (!typeAnalysis.HasEvent)
            {
                string nullable = typeAnalysis.NullableContext.HasFlag(NullableContextOptions.Annotations) ? "?" : "";
                this.writer.WriteLine($"public event global::System.ComponentModel.PropertyChangedEventHandler{nullable} PropertyChanged;");
            }

            foreach (var member in typeAnalysis.Members)
            {
                this.GenerateMember(typeAnalysis, member);
            }

            this.writer.Indent--;
            this.writer.WriteLine("}");
        }

        private void GenerateMember(TypeAnalysis type, MemberAnalysis member)
        {
            string backingMemberReference = "this." + member.BackingMember.ToDisplayString(SymbolDisplayFormats.SymbolName);

            if (member.NullableContextOverride is { } context)
            {
                this.writer.WriteLine(NullableContextToComment(context));
            }

            this.writer.WriteLine($"public {member.Type.ToDisplayString(SymbolDisplayFormats.MethodOrPropertyReturnType)} {member.Name}");
            this.writer.WriteLine("{");
            this.writer.Indent++;

            this.writer.WriteLine($"get => {backingMemberReference};");
            this.writer.WriteLine("set");
            this.writer.WriteLine("{");
            this.writer.Indent++;

            this.writer.WriteLine("if (!global::System.Collections.Generic.EqualityComparer<" +
                member.Type.ToDisplayString(SymbolDisplayFormats.TypeParameter) +
                $">.Default.Equals(value, {backingMemberReference}))");
            this.writer.WriteLine("{");
            this.writer.Indent++;

            this.writer.WriteLine($"{backingMemberReference} = value;");
            this.writer.WriteLine($"this.PropertyChanged?.Invoke(this, new global::System.ComponentModel.PropertyChangedEventArgs(\"{member.Name}\"));");

            this.writer.Indent--;
            this.writer.WriteLine("}");
            this.writer.Indent--;
            this.writer.WriteLine("}");
            this.writer.Indent--;
            this.writer.WriteLine("}");

            if (member.NullableContextOverride != null)
            {
                this.writer.WriteLine(NullableContextToComment(type.NullableContext));
            }
        }

        private static string NullableContextToComment(NullableContextOptions context)
        {
            return context switch
            {
                NullableContextOptions.Disable => "#nullable disable",
                NullableContextOptions.Warnings => "#nullable enable warnings",
                NullableContextOptions.Annotations => "#nullable enable annotations",
                NullableContextOptions.Enable => "#nullable enable"
            };
        }

        public override string ToString() => this.writer.InnerWriter.ToString();
    }
}
